problem : Maximum Depth of Binary Tree (LeetCode 104)

Problem Statement  :
Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

/********************************************************************************** CPP CODE *************************************************************************/

Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
         // we apply over here recursion and call
        // base case :
        if(!root) return 0 ;
        // recursive case 
        int lh = maxDepth(root->left);
        int rh = maxDepth(root->right);

        return max(lh,rh) + 1 ;
        
    }
};

/******************************************************************************** JAVA CODE **************************************************************************/

Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
       
        // we apply over here recursion and call
        // base case :
        if(root == null) return 0 ;
        // recursive case 
        int lh = maxDepth(root.left);
        int rh = maxDepth(root.right);

        return Math.max(lh,rh) + 1 ;
        
    }
}

/**************************************************************************************************************************************************************************/