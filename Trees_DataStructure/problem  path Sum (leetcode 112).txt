problem : path Sum (leetcode 112)

Problem Statement : 
Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.

 

Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.

Example 2:
Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There are two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.

Example 3:
Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000

/ ************************************************************** JAVA BFS SOLUTION ********************************************************************************/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null) return false ;
        // using stack we are keep tracking the path and sumpath both
        Stack<TreeNode> path = new Stack<>() ;
        Stack<Integer> sumPath = new Stack<>() ;

        path.push(root);
        sumPath.push(root.val);

        while(!path.isEmpty()){
            TreeNode temp = path.pop();
            int tempSum = sumPath.pop() ;

            // if a child node and we find the otal sum , then return true 
            if(temp.left == null && temp.right == null && tempSum == targetSum){
                return true ;
            }

            if(temp.right != null){
                path.push(temp.right);
                sumPath.push(temp.right.val + tempSum);
            }

            if(temp.left != null){
                path.push(temp.left);
                sumPath.push(temp.left.val + tempSum);
            }
            
        }
      
       return false ; // if not found then we return false : Time Comp : O(N) and Space  :O(K)

    }
}

/**************************************************************** CPP DFS SOLUTION ******************************************************************************/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool solve(TreeNode* root, int k , int currSum, bool &found){
        // base case 
        if(!root) return false ;
        currSum += root->val ;
        
        if(root->left == NULL && root->right == NULL){
            if(currSum == k) found = true ;
        }
        
        if(!found){
            solve(root->left , k, currSum,found);
            solve(root->right , k, currSum,found);
        }
        
       // currSum -= root->val ;
       return found ;
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
        unordered_map<int,int> mp ;
        bool found = false ;
        solve(root,targetSum,0,found);
        return found ;
    }
    // time complexity : O(N) in worth case traversing the DFS recursively space : O(H)
    // we use another approach using : Level Traversal (BFS) on java code editor

};

/***************************************************************************************************************************************************************************/