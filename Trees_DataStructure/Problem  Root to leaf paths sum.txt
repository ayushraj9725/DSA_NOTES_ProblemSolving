Problem : Root to leaf paths sum   ( leetcode 129)

Problem Statement : 
Given a binary tree, where every node value is a number. Find the sum of all the numbers that are formed from root to leaf paths. The formation of the numbers would be like 10*parent + current (see the examples for more clarification).

Examples:

Input:      
Output: 13997
Explanation : There are 4 leaves, resulting in leaf path of 632, 6357, 6354, 654 sums to 13997.

Input:    
Output: 2630
Explanation: There are 3 leaves, resulting in leaf path of 1240, 1260, 130 sums to 2630.
Input:    
           1
          /
         2                    
Output: 12
Explanation: There is 1 leaf, resulting in leaf path of 12.


Constraints:
1 ≤ number of nodes ≤ 31
1 ≤ node->data ≤ 100

Company Tags
Amazon  Microsoft  OYO Rooms   Google

Expected Complexities
Time Complexity  : O(n)Auxiliary Space  : O(h)


/********************************************************************************  Problem Solution Code ****************************************************************/


///////////////////  C++ DFS TRAVERSAL \\\\\\\\\\\\\\\\\\\\\\\\\\\\



struct Node
 {
     int data;
     Node* left, *right;
}; */

class Solution {
  public:
  void solve(Node* root, int& ans ,int curr ){
      // base case 
      if(!root) {
         return ;
      }
      
      // recursive case 
      curr = curr * 10 + root->data ;
      
      // If it's a leaf node, add the number to the answer
      if (!root->left && !root->right) {
          ans += curr;
          return;
      }
      
      solve(root->left , ans, curr);
      
      solve(root->right , ans, curr);
      
  }
    int treePathsSum(Node *root) {
        // code here.
        int ans = 0 ;
        solve(root,ans,0);
        
        return ans ;
    }
};

/**********************************************************************************************************************************************************************/


/////////////////////// JAVA CODE \\\\\\\\\\\\\\\\\\\\\\\\\


public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans = 0 ;
    void solve(TreeNode root, int curr){
        // base case 
        if(root == null) return ;
        // recursive case 
        curr = curr * 10 + root.val ;
        // if reach to leaf then update the ans 
        if(root.left == null && root.right == null) {
            ans += curr ;
            return ;
        }
        // now call for the left and right
        solve(root.left,curr);
        solve(root.right,curr);
    }
    public int sumNumbers(TreeNode root) {
        solve(root,0);
        return ans ;
    }
}

//// LEETCODE : 129 