Problem : Power Of Two ( leetCode 231 )

Problem Statement: 

Given an integer n, return true if it is a power of two. Otherwise, return false.
An integer n is a power of two, if there exists an integer x such that n == 2x.


Example 1:

Input: n = 1
Output: true
Explanation: 2 to the power  = 1

Example 2:
Input: n = 16
Output: true
Explanation: 2 to the power 4 = 16

Example 3:

Input: n = 3
Output: false
 

Constraints:

-231 <= n <= 231 - 1

 /************************************************************************** APPROACH USING LOOP ***********************************************************/
class Solution 
public:
    bool isPowerOfTwo(int n) {
      if(n <= 0) return false ;

        while(n % 2 == 0){
            n/=2 ;
        }

        return (n == 1) ? true : false ;

        // it time take : O(log2n) and space : O(1)
     }
};

 /************************************************************************ RECURSIVE APPROACH ******************************************************************/

class Solution {
public:
    bool isPowerOfTwo(int n) {
        
       // Using Recursion : 

       // base case : 
       if(n <= 0) return false ;
       if(n == 1) return true ;

       // recursive case and call
       if(n % 2 == 0) {
          return isPowerOfTwo(n/2) ; // make the recursive call for the next 
       }
       return false ;  // otherwise return false at the end 

        }        //it time take : O(log2n) and space : O(N)
};


/************************************************************************** JAVA CODE MATHS *******************************************************************/

class Solution {
    public boolean isPowerOfTwo(int n) {
        int i =0;
     while(i<=n){
	   if((int)Math.pow(2,i) == n){
		return true;
	   }	
	i++;
      }
   return false;
   }  
}
/ ************************************************************************** BIT MANIPULATION *****************************************************************/

// Check if n is greater than 0 and n & (n - 1) == 0
    return n > 0 && (n & (n - 1)) == 0;  
       
    }
   /* if(n & n-1 == 0){
        return true ;
    }
    return false ;  */

/********************************************************************************************************************************************************************/
