Problem : Reverse an Array

Problem Link : https://www.geeksforgeeks.org/problems/reverse-an-array/0

Problem Statement : 
You are given an array of integers arr[]. Your task is to reverse the given array.

Note: Modify the array in place.

Examples:

Input: arr = [1, 4, 3, 2, 6, 5]
Output: [5, 6, 2, 3, 4, 1]
Explanation: The elements of the array are 1 4 3 2 6 5. After reversing the array, the first element goes to the last position, the second element goes to the second last position and so on. Hence, the answer is 5 6 2 3 4 1.

Input: arr = [4, 5, 2]
Output: [2, 5, 4]
Explanation: The elements of the array are 4 5 2. The reversed array will be 2 5 4.

Input: arr = [1]
Output: [1]
Explanation: The array has only single element, hence the reversed array is same as the original.

Constraints:
1<=arr.size()<=105
0<=arr[i]<=105

Company Tags
Bloomberg Facebook TCS Adobe Google Infosys Capgemini Morgan Stanley Amazon Microsoft Apple Yahoo PayPal Uber 

/******************************************************* RECURSIVE APPROACH ********************************************************/

 TIME COMPLEXITY : O(N)     
 SPACE COMPLEXITY : O(N)  IT IS USING STACK INITIALLY 


class Solution {
 private:
  void reverse(int low , int high , vector<int> &arr){
        // base condition 
        if(low > high) return ;
        // we are swapping it untill low cross high 
        swap(arr[low],arr[high]) ;
        
        reverse(low + 1, high - 1 , arr); // calling again and swapping again  untill the base condition not true
 }
  public:
    void reverseArray(vector<int> &arr) {
       
       // recursive approach :
       
       // using swap 
       int low = 0 ;
       int high = arr.size() - 1 ;
       
       reverse(low,high,arr);
       
     }
};   

/********************************************************* SIMPLE TWO POINTER APPROACH *************************************************/
  TIME COMPLEXITY : O(N)     
  SPACE COMPLEXITY : O(1)
 class Solution {
    public:
    void reverseArray(vector<int> &arr) {
       
       // code here
        int i = 0 , j = arr.size() - 1 ;
        while(i <= j){
            int temp = arr[i] ;
            arr[i] = arr[j] ;
            arr[j] = temp ;
            i++ ;
            j-- ;
        }
        
       
        
    }
};

/****************************************************************************************************************************************/