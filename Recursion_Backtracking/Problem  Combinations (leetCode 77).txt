Problem : Combinations (leetCode 77)

Problem Statement : 
Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.


Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.

Example 2:
Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.
 

Constraints:

1 <= n <= 20
1 <= k <= n

/******************************************************************************** CPP CODE *************************************************************************/

class Solution {
public:
    void solve(int start , int n ,int k , vector<int>& curr, vector<vector<int>>& ans){
        // base case 
        if(curr.size() == k){
            ans.push_back(curr);
            return ;
        }
        // recursive case (checking and calling)
        for(int i = start ; i <= n ; i++){
            curr.push_back(i); // add 
            solve(i+1,n,k,curr,ans);
            curr.pop_back();
        }
    }
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> ans ;
        int start = 1 ;
        vector<int> curr ;
        solve(start,n,k,curr,ans);

        return ans ;
        // time comp : combination formula c(n,k) -> n!/k!(n-k)!  for k time so  
        // overall time : O((n,k)*k) and space same 
    }
};

/******************************************************************************** JAVA CODE ************************************************************************/

class Solution {
    public static void solve(int n , int k , List<Integer> curr , List<List<Integer>>ans){
        // base case 
        if(k == 0) {
            ans.add(new ArrayList<>(curr)); // if k get equal to the 0 that mean we have generated the combinations
            return ; // just return after ading 
        }
        if(n == 0) return ; //  if n get zero that mean we picked up all the number from 1 to n so just return 
        // now pich the single n
        curr.add(n);
        solve(n-1,k-1,curr,ans);// make call for other element getting
        curr.remove(curr.size()-1); // backtrack if that no is not appropriate make combination just remove what we added previously
        solve(n-1,k,curr,ans); // if that no we not take so we make other again call for taking n for making the possible combination ,by making k agin remains same

    }
    public List<List<Integer>> combine(int n, int k) {
       List<List<Integer>> ans = new ArrayList<>();
       solve(n,k,new ArrayList<>(),ans) ;

       return ans ;
       // this thing we solve in c++ code editor in diff approach 
       // Time complexity : O(2^n)
    }
}

/************************************************************************************************************************************************************************/