Problem : Merge Sort
 
 /*************************************************** PROBLEM : MERGE SORT ***********************************************************/

Problem Link : https://www.geeksforgeeks.org/problems/merge-sort/1

Problem Statement : 
Given an array arr[], its starting position l and its ending position r. Sort the array using the merge sort algorithm.

Examples:

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]

Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Input: arr[] = [1, 3 , 2]
Output: [1, 2, 3]
/////////////////////////////////
Constraints:
1 <= arr.size() <= 105
1 <= arr[i] <= 105

Company Tags
Paytm Amazon Microsoft Snapdeal Oracle Goldman Sachs Wipro Qualcomm Boomerang Commerce Grofers Target Corporation Medlife 

/****************************************************** SOLUTION *********************************************************************/

class Solution {
  private:
    void merge(vector<int>& arr, int l, int r,int mid){
        
        /// we are making two array for meging and storing 
        int n = arr.size();
        int n1 = mid - l + 1 ;
        int n2 = r - mid ;
        
        vector<int> a1(n1);
        vector<int> a2(n2);
        int i , j , k ;
        //  filling the element in a1 and a2 
        for(i = 0 ; i < n1 ; i++){
            a1[i] = arr[l+i] ;
        }
        for(j = 0 ; j < n2 ; j++){
            a2[j] = arr[mid+1+j] ;
        }
        
        k = l ; // k initiallize with l k merge from l 
        i = 0 , j = 0 ;
        
        while(i < n1 && j < n2){
            if(a1[i] <= a2[j]){
                arr[k] = a1[i] ;
                i++ ;
            }
            else{
                arr[k] = a2[j] ;
                j++ ;
            }
            k++ ;
        }
        while(i < n1){
            arr[k] = a1[i] ;
            i++ ;
            k++ ;
        }
        while(j < n2){
            arr[k] = a2[j] ;
            j++ ;
            k++ ;
        }
        
    }
  public:
    void mergeSort(vector<int>& arr, int l, int r) {
        // code here
        // we are applying here divide and conqure approach to sort this array 
        // apply binary search 
      if(l < r){  
        int mid = l + (r -l)/2 ;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        
        // now we are 
        merge(arr,l,r,mid);
      }
      
    }
};
int main() {
    vector<int> vec = {12, 11, 13, 5, 6, 7};
    int n = vec.size();

    // Sorting vec using mergesort
    mergeSort(vec, 0, n - 1);

    for (auto i: vec)
        cout << i << " ";
    return 0;
}

/***************************************************************************************************************************************/